###################################################################
#Denis Doci
#
#Archlab Part C
#
#Doci2
#
#Final CPE: 8.44
#
#Description: 
#
#The only difference in the pipe-full.hcl file is the implementation
#of the command iaddq (IIADDQ in the hcl). This takes the place of 
#all the irmovq and subsequent addq or subq commands. This avoids the
#stall involved with doing these instructions.
# 
#The ncopy.ys file is edited by doing a 4x loop unroll. To handle
#I first covered all base cases (less than 4 elements). If it fell
#under this category it would proceed to the loopfin.
#Otherwise it would go through the entire loop unroll (again 4x) and then 
#proceed to loopfin. The Npos was changed to allow for the unroll
#incrementing src, dst, and len by 4* what they previously were
#
#Also there are a few changes in instruction ordering. I did them when I
#noticed I could do one, so I dont really recall specifically which
#functions fall under this category. 

##################################################################
 # ncopy.ys - Copy a src block of len words to dst.
 # Return the number of positive words (>0) contained in src.
 #
 # Include your name and UIC netid here.
 #
 # Describe how and why you modified the baseline code.
#
 ##################################################################
 # Do not modify this portion
 # Function prologue.
 # %rdi = src, %rsi = dst, %rdx = len
 ncopy:
 ##################################################################
 # You can modify this portion
 # Loop header
 
 xorq %rax,%rax # count = 0;
 andq %rdx,%rdx # len <= 0?
 jle Done # if so, goto Done:
 iaddq $-4, %rdx
 jl LoopFin

Loop0:
 mrmovq (%rdi), %r10 # read val from src...
 mrmovq  8(%rdi), %r8 # read val from src...
 rmmovq  %r10, (%rsi) # ...and store it to dst
 andq    %r10, %r10 # val <= 0?
 jle     Loop1
 iaddq   $1, %rax

Loop1:
 rmmovq  %r8, 8(%rsi) # ...and store it to dst
 andq    %r8, %r8 # val <= 0?
 jle     Loop2
 iaddq   $1, %rax

Loop2:
 mrmovq  16(%rdi), %r10 # read val from src...
 mrmovq  24(%rdi), %r8 # read val from src...
 rmmovq  %r10, 16(%rsi) # ...and store it to dst
 andq    %r10, %r10 # val <= 0?
 jle     Loop3
 iaddq   $1, %rax
    
Loop3:       
 rmmovq %r8, 24(%rsi)
 andq   %r8, %r8
 jle    Npos
 iaddq  $1, %rax

Npos:
 iaddq   $32, %rdi # src+4
 iaddq   $32, %rsi # dst+4
 iaddq   $-4, %rdx # len-4
 jge Loop0  # if so, goto Loop:

LoopFin: 
 iaddq $4, %rdx

Elem1:
 iaddq $-1, %rdx
 jl Done
 mrmovq (%rdi), %r10
 mrmovq 8(%rdi), %r8
 rmmovq %r10, (%rsi)
 andq   %r10, %r10
 jle Elem2
 iaddq $1, %rax

Elem2:
 iaddq $-1, %rdx
 jl Done
 rmmovq %r8, 8(%rsi)
 andq   %r8, %r8
 jle Elem3
 iaddq $1, %rax

Elem3:
 iaddq $-1, %rdx
 jl Done
 mrmovq 16(%rdi), %r10
 rmmovq %r10, 16(%rsi)
 andq   %r10, %r10
 jle    Done
 iaddq  $1, %rax

 ##################################################################
 # Do not modify the following section of code
 # Function epilogue.
 Done:
 ret
 ##################################################################
 # Keep the following label at the end of your function
 End:

